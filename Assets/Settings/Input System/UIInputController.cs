//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Settings/Input System/UIInputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UIInputController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UIInputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UIInputController"",
    ""maps"": [
        {
            ""name"": ""UI"",
            ""id"": ""8720de93-a9fd-435d-9ec3-956580b48671"",
            ""actions"": [
                {
                    ""name"": ""OpenBagUI"",
                    ""type"": ""Button"",
                    ""id"": ""d70bd9a3-7214-4385-a3a5-eaae09a8a634"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CloseAllUI"",
                    ""type"": ""Button"",
                    ""id"": ""bc785f68-1b18-466f-888e-0af8b6c4e769"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""08b29609-801b-4c7c-ab8c-b6de29dd3a53"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""OpenBagUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3143089e-c6d1-46a5-addc-691d1c1d6ce5"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""CloseAllUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_OpenBagUI = m_UI.FindAction("OpenBagUI", throwIfNotFound: true);
        m_UI_CloseAllUI = m_UI.FindAction("CloseAllUI", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_OpenBagUI;
    private readonly InputAction m_UI_CloseAllUI;
    public struct UIActions
    {
        private @UIInputController m_Wrapper;
        public UIActions(@UIInputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenBagUI => m_Wrapper.m_UI_OpenBagUI;
        public InputAction @CloseAllUI => m_Wrapper.m_UI_CloseAllUI;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @OpenBagUI.started += instance.OnOpenBagUI;
            @OpenBagUI.performed += instance.OnOpenBagUI;
            @OpenBagUI.canceled += instance.OnOpenBagUI;
            @CloseAllUI.started += instance.OnCloseAllUI;
            @CloseAllUI.performed += instance.OnCloseAllUI;
            @CloseAllUI.canceled += instance.OnCloseAllUI;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @OpenBagUI.started -= instance.OnOpenBagUI;
            @OpenBagUI.performed -= instance.OnOpenBagUI;
            @OpenBagUI.canceled -= instance.OnOpenBagUI;
            @CloseAllUI.started -= instance.OnCloseAllUI;
            @CloseAllUI.performed -= instance.OnCloseAllUI;
            @CloseAllUI.canceled -= instance.OnCloseAllUI;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IUIActions
    {
        void OnOpenBagUI(InputAction.CallbackContext context);
        void OnCloseAllUI(InputAction.CallbackContext context);
    }
}
